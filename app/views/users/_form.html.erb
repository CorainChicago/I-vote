<% if @errors%>
  <% @errors.each do |error| %>
    <p><%= error %></p>
  <% end %>
<% end %>






    <script>
// This example displays an address form, using the autocomplete feature
// of the Google Places API to help users fill in the information.

var placeSearch, autocomplete;
var componentForm = {
  street_number: 'short_name',
  route: 'long_name',
  locality: 'long_name',
  administrative_area_level_1: 'short_name',
  country: 'long_name',
  postal_code: 'short_name'
};

function initAutocomplete() {
  // Create the autocomplete object, restricting the search to geographical
  // location types.
  autocomplete = new google.maps.places.Autocomplete(
      /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
      {types: ['geocode']});

  // When the user selects an address from the dropdown, populate the address
  // fields in the form.
  autocomplete.addListener('place_changed', fillInAddress);
}

// [START region_fillform]
function fillInAddress() {
  // Get the place details from the autocomplete object.
  var place = autocomplete.getPlace();
$('#user_street_address').val($('#autocomplete').val().split(', United States')[0].split(',')[0]);
$('#user_city').val($('#autocomplete').val().split(', United States')[0].split(',')[1]);
$('#user_state').val($('#autocomplete').val().split(', United States')[0].split(',')[2]);
// $('#user_state').val($('#autocomplete').val().split(', United States')[0].split(',')[3]);


  // $('#autocomplete').val().split(', United States')[0].split(',')[0]

// console.log(place.address_components);
  // for (var component in componentForm) {
  //   // console.log(component.value);
  //   // console.log(component);
  //   // document.getElementById(component).value = '';
  //   // document.getElementById(component).disabled = false;
  // }
// console.log('--------');
  // Get each component of the address from the place details
  // and fill the corresponding field on the form.
  // for (var i = 0; i < place.address_components.length; i++) {
  //   var addressType = place.address_components[i].types[0];
  //   if (componentForm[addressType]) {
  //     var val = place.address_components[i][componentForm[addressType]];
  //     // document.getElementById(addressType).value = val;
  //     // console.log(val);
  //   }
  // }
}
// [END region_fillform]

// [START region_geolocation]
// Bias the autocomplete object to the user's geographical location,
// as supplied by the browser's 'navigator.geolocation' object.
function geolocate() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(function(position) {
      var geolocation = {
        lat: position.coords.latitude,
        lng: position.coords.longitude
      };
      var circle = new google.maps.Circle({
        center: geolocation,
        radius: position.coords.accuracy
      });
      autocomplete.setBounds(circle.getBounds());
    });
  }
}
// [END region_geolocation]

    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=<%=ENV['MAP_KEY']%>&signed_in=true&libraries=places&callback=initAutocomplete"
        async defer></script>




<div class="grid-block new-user-form">
  <div class="large-5 grid-content">
    <h1 class="sign-up-header">Sign Up</h1><br><br>
  <%= form_for @user do |f| %>
    <%=f.label 'Email:'%>
    <%=f.text_field :email %>
    <br>
    <%=f.label 'Password:'%>
    <%=f.password_field :password%>
    <br>
    <%=f.label 'Address:'%>
 <div id="locationField">
      <input id="autocomplete"
             onFocus="geolocate()" type="text"></input>
    </div>
    <%=f.hidden_field :street_address %>


    <%=f.hidden_field :city%>

    <%=f.hidden_field :state%>

    <%=f.label 'Zip:'%>
    <%=f.text_field :zip%>
    <br>
    <%=f.submit 'Register'%>
  <%end%>
  </div>
</div>
